/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mini_library;

import java.sql.*;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.function.Predicate;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Asus
 */
public class Book_Record_GUI extends javax.swing.JFrame {

    /**
     * Creates new form Book_Record_GUI
     */
    static ArrayList<Book> bookList = new ArrayList<>();
    DefaultTableModel model;
    String url = "jdbc:mysql://localhost:3306/librarydb";
    String username = "root";
    String password = "1234";

    public Book_Record_GUI() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setTitle("Book Record");
        model = (DefaultTableModel) table.getModel();
        displayAllBook();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        genreLabel = new javax.swing.JLabel();
        bookidTF = new javax.swing.JTextField();
        titleTF = new javax.swing.JTextField();
        authorTF = new javax.swing.JTextField();
        publisherTF = new javax.swing.JTextField();
        genreTF = new javax.swing.JTextField();
        categoryCB = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        insertBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        displayAllBtn = new javax.swing.JButton();
        resetBtn = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        sortBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 255));

        jLabel1.setFont(new java.awt.Font("Bodoni MT Black", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("BOOK RECORD");

        jPanel2.setBackground(new java.awt.Color(0, 0, 153));

        jLabel2.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Book ID");

        jLabel3.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Title");

        jLabel4.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Author");

        jLabel5.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Publisher");

        jLabel6.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Category");

        genreLabel.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        genreLabel.setForeground(new java.awt.Color(255, 255, 255));
        genreLabel.setText("Genre");

        bookidTF.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        bookidTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookidTFActionPerformed(evt);
            }
        });

        titleTF.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        authorTF.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        publisherTF.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        genreTF.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        categoryCB.setFont(new java.awt.Font("Rockwell", 0, 18)); // NOI18N
        categoryCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose Category", "Fiction", "Non-fiction" }));
        categoryCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bookidTF)
                            .addComponent(titleTF)
                            .addComponent(authorTF)
                            .addComponent(publisherTF)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(categoryCB, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(genreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(genreTF, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(bookidTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(titleTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(authorTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(publisherTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(categoryCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(genreLabel)
                    .addComponent(genreTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(102, 102, 255));

        insertBtn.setBackground(new java.awt.Color(0, 204, 51));
        insertBtn.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        insertBtn.setForeground(new java.awt.Color(0, 0, 0));
        insertBtn.setText("INSERT");
        insertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertBtnActionPerformed(evt);
            }
        });

        updateBtn.setBackground(new java.awt.Color(255, 255, 51));
        updateBtn.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        updateBtn.setForeground(new java.awt.Color(0, 0, 0));
        updateBtn.setText("UPDATE");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        searchBtn.setBackground(new java.awt.Color(51, 51, 255));
        searchBtn.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        searchBtn.setForeground(new java.awt.Color(0, 0, 0));
        searchBtn.setText("SEARCH");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(255, 0, 0));
        deleteBtn.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(0, 0, 0));
        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        displayAllBtn.setBackground(new java.awt.Color(255, 102, 51));
        displayAllBtn.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        displayAllBtn.setForeground(new java.awt.Color(0, 0, 0));
        displayAllBtn.setText("DISPLAY ALL");
        displayAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayAllBtnActionPerformed(evt);
            }
        });

        resetBtn.setBackground(new java.awt.Color(255, 0, 255));
        resetBtn.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        resetBtn.setForeground(new java.awt.Color(0, 0, 0));
        resetBtn.setText("RESET");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(updateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(displayAllBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resetBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(insertBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(insertBtn)
                .addGap(18, 18, 18)
                .addComponent(updateBtn)
                .addGap(18, 18, 18)
                .addComponent(searchBtn)
                .addGap(18, 18, 18)
                .addComponent(deleteBtn)
                .addGap(18, 18, 18)
                .addComponent(displayAllBtn)
                .addGap(18, 18, 18)
                .addComponent(resetBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "Title", "Author", "Publisher", "Category", "Type"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70))
        );

        jButton1.setBackground(new java.awt.Color(0, 153, 153));
        jButton1.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.setText("BACK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        sortBtn.setBackground(new java.awt.Color(0, 153, 153));
        sortBtn.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        sortBtn.setForeground(new java.awt.Color(0, 0, 0));
        sortBtn.setText("SORT");
        sortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(sortBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1)
                    .addComponent(sortBtn))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 372, Short.MAX_VALUE))
                .addContainerGap(95, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static ArrayList<Book> getBookList() {
        return bookList;
    }
    private void bookidTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookidTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookidTFActionPerformed

    private void displayAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayAllBtnActionPerformed
        // Display the books in the table
        displayAllBook();

    }//GEN-LAST:event_displayAllBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new Admin_Portal_GUI().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        // TODO add your handling code here:
        clearField();
    }//GEN-LAST:event_resetBtnActionPerformed

    private void insertBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertBtnActionPerformed
        // TODO add your handling code here:
        try {
            String bookidStr = bookidTF.getText();

            int bookID = Integer.parseInt(bookidStr);
            String title = titleTF.getText();
            String author = authorTF.getText();
            String publisher = publisherTF.getText();
            String category = (String) categoryCB.getSelectedItem();
            String genre_subject = genreTF.getText();

            //check first if bookID already existed
            if (isBookIDExist(bookID)) {
                JOptionPane.showMessageDialog(null, "There is an existing book with that Book ID!");
                return;
            }

            //check if all field is filled before creating the object
            if (isSomeFieldEmpty()) {
                JOptionPane.showMessageDialog(null, "Please enter all details!");
                return;
            }

//            Book book = new Book(bookID, title, author, publisher, category);
//            try {
//                Database_Connectivity.addRecordBook(book, genre_subject);
//
//                if (book.getCategory().equalsIgnoreCase("Fiction")) {
//                    Fiction_Book fb = (Fiction_Book) book;
//                    fb.setGenre(genre_subject);
//
//                } else {
//                    Non_Fiction_Book nfb = (Non_Fiction_Book) book;
//                    nfb.setSubject(genre_subject);
//
//                }
//
//                bookList.add(book);
//                model.insertRow(model.getRowCount(), new Object[]{bookID, title, author, publisher, category, genre_subject});
//                JOptionPane.showMessageDialog(null, "Book is added!");
//                clearField();
//
//            } catch (SQLException e) {
//                JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
//            }
            if (category.equalsIgnoreCase("Fiction")) {
                // Insert into the database
                try {
                    Fiction_Book fictionBook = new Fiction_Book(bookID, title, author, publisher, category, genre_subject);
                    Database_Connectivity.addRecordBook(fictionBook, genre_subject);
                    bookList.add(fictionBook);

                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Failed to insert book data into the database for Fiction.");
                    JOptionPane.showMessageDialog(null, "SQL Error: " + e.getMessage());

                }

            } else {
                // Insert into the database
                try {
                    Book book = new Book(bookID, title, author, publisher, category);
//                    Non_Fiction_Book nfb = (Non_Fiction_Book) book;
                    Non_Fiction_Book nonFictionBook = new Non_Fiction_Book(bookID, title, author, publisher, category, genre_subject);
                    Database_Connectivity.addRecordBook(nonFictionBook, genre_subject);
                    bookList.add(nonFictionBook);

                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Failed to insert book data into the database for Non-Fiction.");
                    JOptionPane.showMessageDialog(null, "SQL Error: " + e.getMessage());

                }

            }
            model.insertRow(model.getRowCount(), new Object[]{bookID, title, author, publisher, category, genre_subject});
            JOptionPane.showMessageDialog(null, "Book is added!");
            clearField();

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter an integer value for Book ID!");
            clearField();
        }
    }//GEN-LAST:event_insertBtnActionPerformed

    private void displayAllBook() {
        model.setRowCount(0);

        try {
            // Fetch all users from the database
            ArrayList<Book> booksFromDB = Database_Connectivity.displayAllRecordBook();

            if (booksFromDB.isEmpty()) {
                JOptionPane.showMessageDialog(null, "There is nothing to display.");
                return;
            }

            // Populate the table with the fetched data
            for (Book b : booksFromDB) {
                if (b.getCategory().equalsIgnoreCase("Fiction")) {
                    Fiction_Book fictionBook = (Fiction_Book) b;  // Cast the book to Fiction_Book so we can use the child method - getGenre()

                    model.insertRow(model.getRowCount(), new Object[]{
                        b.getBookID(),
                        b.getTitle(),
                        b.getAuthor(),
                        b.getPublisher(),
                        b.getCategory(),
                        fictionBook.getGenre(),
                        b.isAvailable()
                    });
                } else if (b.getCategory().equalsIgnoreCase("Non-fiction")) {
                    Non_Fiction_Book fictionBook = (Non_Fiction_Book) b;  // Cast the book to Non_Fiction_Book so we can use the child method - getSubject()

                    model.insertRow(model.getRowCount(), new Object[]{
                        b.getBookID(),
                        b.getTitle(),
                        b.getAuthor(),
                        b.getPublisher(),
                        b.getCategory(),
                        fictionBook.getSubject(),
                        b.isAvailable()

                    });
                }
            }

            // Update the userList to match the database
            bookList.clear();
            bookList.addAll(booksFromDB);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error fetching users from the database: " + e.getMessage());
        }

    }

    private void displayAllBook(ArrayList<Book> list) {
        model.setRowCount(0);

        try {
            // Fetch all users from the database
            ArrayList<Book> booksFromDB = Database_Connectivity.displayAllRecordBook();

            if (booksFromDB.isEmpty()) {
                JOptionPane.showMessageDialog(null, "There is nothing to display.");
                return;
            }

            // Populate the table with the fetched data
            for (Book b : list) {
                if (b.getCategory().equalsIgnoreCase("Fiction")) {
                    Fiction_Book fictionBook = (Fiction_Book) b;  // Cast the book to Fiction_Book so we can use the child method - getGenre()

                    model.insertRow(model.getRowCount(), new Object[]{
                        b.getBookID(),
                        b.getTitle(),
                        b.getAuthor(),
                        b.getPublisher(),
                        b.getCategory(),
                        fictionBook.getGenre(),
                        b.isAvailable()
                    });
                } else if (b.getCategory().equalsIgnoreCase("Non-fiction")) {
                    Non_Fiction_Book fictionBook = (Non_Fiction_Book) b;  // Cast the book to Non_Fiction_Book so we can use the child method - getSubject()

                    model.insertRow(model.getRowCount(), new Object[]{
                        b.getBookID(),
                        b.getTitle(),
                        b.getAuthor(),
                        b.getPublisher(),
                        b.getCategory(),
                        fictionBook.getSubject(),
                        b.isAvailable()

                    });
                }
            }

            // Update the userList to match the database
            bookList.clear();
            bookList.addAll(booksFromDB);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error fetching users from the database: " + e.getMessage());
        }

    }

    private void clearField() {
        bookidTF.setText("");
        titleTF.setText("");
        authorTF.setText("");
        publisherTF.setText("");
        categoryCB.setSelectedIndex(0);
        genreTF.setText("");
    }

    public boolean isSomeFieldEmpty() {
        try {
            String bookidStr = bookidTF.getText();

            int bookID = Integer.parseInt(bookidStr);
            String title = titleTF.getText();
            String author = authorTF.getText();
            String publisher = publisherTF.getText();
            String category = (String) categoryCB.getSelectedItem();
            String genre_subject = genreTF.getText();

            if (bookidStr.isEmpty() || title.isEmpty() || author.isEmpty() || publisher.isEmpty() || category.equals("Choose Category") || genre_subject.isEmpty()) {
                return true;
            }

        } catch (NumberFormatException e) {
            return true;
        }

        return false;
    }

    public boolean isBookIDExist(int bookId) {
        for (Book b : bookList) {
            if (b.getBookID() == bookId) {
                return true;
            }
        }
        return false;
    }

    public ArrayList<Book> searchBy(ArrayList<Book> bookList, Predicate<Book> testBook) {
        ArrayList<Book> foundBookList = new ArrayList<>();

        for (Book b : bookList) {
            if (testBook.test(b)) {
                foundBookList.add(b);
            }
        }
        return foundBookList;
    }
//    public Book searchBook(String searchToken) {
//        for (Book book : bookList) {
//            if (book.getAuthor().equalsIgnoreCase(searchToken) || book.getTitle().contains(searchToken)) {
//                if (book instanceof Fiction_Book) {
//                    model.addRow(new Object[]{book.getBookID(), book.getTitle(), book.getAuthor(), book.getPublisher(), book.getCategory(), ((Fiction_Book) book).getGenre()});
//
//                } else if (book instanceof Non_Fiction_Book) {
//                    model.addRow(new Object[]{book.getBookID(), book.getTitle(), book.getAuthor(), book.getPublisher(), book.getCategory(), ((Non_Fiction_Book) book).getSubject()});
//
//                }
//                return book;
//            }
//        }
//        return null;
//    }

    private void categoryCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryCBActionPerformed
        // TODO add your handling code here:
        String category = (String) categoryCB.getSelectedItem();

        if (category.equals("Fiction")) {
            this.genreLabel.setText("Genre");

        } else if (category.equals("Non-fiction")) {
            this.genreLabel.setText("Subject");

        }
    }//GEN-LAST:event_categoryCBActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        ArrayList<Book> resultList;

        int choice = JOptionPane.showConfirmDialog(null, "Click 'Yes' to search based on Author's Name and Click 'No' to search based on Book Title Keyword!", "Search for Book", JOptionPane.YES_NO_OPTION);

        try {
            model.setRowCount(0);
            ArrayList<Book> searchResults;

            if (choice == JOptionPane.YES_OPTION) {
                // Search by author
                String searchAuthor = JOptionPane.showInputDialog("Enter the Author's Name to be searched.");
                if (searchAuthor == null || searchAuthor.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please enter a valid author name.");
                    return;
                }
                // Fetch results from the database
                Predicate<Book> authorName = book -> book.getAuthor().equalsIgnoreCase(searchAuthor);
                searchResults = Database_Connectivity.searchBy(authorName);

            } else if (choice == JOptionPane.NO_OPTION) {
                // Search by title keyword
                String searchKeyword = JOptionPane.showInputDialog("Enter the Book Title's Keyword to be searched.");
                if (searchKeyword == null || searchKeyword.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Please enter a valid title keyword.");
                    return;
                }
                // Fetch results from the database
                Predicate<Book> titleKeyword = book -> book.getTitle().toLowerCase().contains(searchKeyword.toLowerCase());
                searchResults = Database_Connectivity.searchBy(titleKeyword);

            } else {
                // if the User canceled the search
                return;
            }

            // Display the search results
            if (searchResults != null && !searchResults.isEmpty()) {
                displayAllBook(searchResults); // Display the results in the table
                JOptionPane.showMessageDialog(null, searchResults.size() + " book(s) found.");
            } else {
                JOptionPane.showMessageDialog(null, "No books found matching the search criteria.");
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error searching for books: " + e.getMessage());
        }
//        if (choice == JOptionPane.YES_OPTION) {
//            String searchAuthor = JOptionPane.showInputDialog("Enter the Author's Name to be searched.");
//            Predicate<Book> authorName = book -> book.getAuthor().equalsIgnoreCase(searchAuthor);
//            resultList = searchBy(bookList, authorName);
//        } else {
//            String searchKeyword = JOptionPane.showInputDialog("Enter the Book Title's Keyword to be searched.");
//            Predicate<Book> keyword = book -> book.getTitle().toLowerCase().contains(searchKeyword.toLowerCase());
//            resultList = searchBy(bookList, keyword);
//        }
//
//        if (!resultList.isEmpty()) {
//            displayAllBook(resultList);
//        }

//delete
//        String title = titleTF.getText();
//        String author = authorTF.getText();
//
//        if (title.isEmpty() && author.isEmpty()) {
//            JOptionPane.showMessageDialog(searchBtn, "Enter the name of author or keyword of the title to be searched.");
//            return;
//        }
//
//        //check if either field is filled before proceed to search
//        if (searchBook(title) != null || searchBook(author) != null) {
//            JOptionPane.showMessageDialog(null, "Book is found.");
//
//        } else {
//            JOptionPane.showMessageDialog(null, "Book is not found.");
//        }

    }//GEN-LAST:event_searchBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:

        if (bookList.size() == 0) {
            JOptionPane.showMessageDialog(null, "There is no book in the list to be updated.");
            return;

        }
        if (isSomeFieldEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a row to be updated first!");
            return;
        }

        int id = Integer.parseInt(bookidTF.getText());

        if (!isBookIDExist(id)) {
            JOptionPane.showMessageDialog(null, "There is no such book is found with this Book ID: " + id);
            return;
        }

        String title = titleTF.getText();
        String author = authorTF.getText();
        String publisher = publisherTF.getText();
        String category = (String) categoryCB.getSelectedItem();
        String genre_subject = genreTF.getText();

        int choice = JOptionPane.showConfirmDialog(null, "You are editing this book information. "
                + "\nDo you want to apply these changes?", "Update Book Information", JOptionPane.YES_NO_OPTION);

        if (choice == JOptionPane.YES_OPTION) {
            for (Book b : bookList) {
                if (b.getBookID() == id) {
                    model.setRowCount(0);
                    b.setTitle(title);
                    b.setAuthor(author);
                    b.setPublisher(publisher);
                    b.setCategory(category);

                    try {
                        Database_Connectivity.editRecordBook(b, genre_subject);

                        if (b instanceof Fiction_Book && b.getCategory().equalsIgnoreCase("Fiction")) {
                            Fiction_Book fictionBook = (Fiction_Book) b;
                            fictionBook.setGenre(genre_subject);

                            model.addRow(new Object[]{b.getBookID(), b.getTitle(), b.getAuthor(), b.getPublisher(), b.getCategory(), fictionBook.getGenre()});

                        } else if (b instanceof Non_Fiction_Book && b.getCategory().equalsIgnoreCase("Non-fiction")) {
                            ((Non_Fiction_Book) b).setSubject(genre_subject);
                            Non_Fiction_Book nonFictionBook = (Non_Fiction_Book) b;

                            model.addRow(new Object[]{b.getBookID(), b.getTitle(), b.getAuthor(), b.getPublisher(), b.getCategory(), nonFictionBook.getSubject()});
                        }

                        JOptionPane.showMessageDialog(null, "Update is successful.");

                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(null, "Error when updating book information in the database.");
                        e.printStackTrace(); // Print the stack trace to the console
                        JOptionPane.showMessageDialog(null, "SQL Error: " + e.getMessage());
                    }
                    break;
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "No changes is made.");
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        // TODO add your handling code here:
        //get selected row value from table
        String bookidToTF = table.getValueAt(table.getSelectedRow(), 0).toString();
        String titleToTF = table.getValueAt(table.getSelectedRow(), 1).toString();
        String authorToTF = table.getValueAt(table.getSelectedRow(), 2).toString();
        String publisherToTF = table.getValueAt(table.getSelectedRow(), 3).toString();
        String categoryToTF = table.getValueAt(table.getSelectedRow(), 4).toString();
        String genreToTF = table.getValueAt(table.getSelectedRow(), 5).toString();

        //set the value selected from table into textField
        bookidTF.setText(bookidToTF);
        titleTF.setText(titleToTF);
        authorTF.setText(authorToTF);
        publisherTF.setText(publisherToTF);
        categoryCB.setSelectedItem(categoryToTF);
        genreTF.setText(genreToTF);
    }//GEN-LAST:event_tableMouseClicked

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        String bookID = bookidTF.getText();
        ArrayList<Book> resultList;

        if (bookList.size() == 0) {
            JOptionPane.showMessageDialog(null, "There is no book in the list to be deleted.");
            return;

        }

        if (isSomeFieldEmpty()) {
            JOptionPane.showMessageDialog(null, "Please select a row to be deleted first!");
            return;
        }

        int choice = JOptionPane.showConfirmDialog(null, "You are deleting this book information! "
                + "\nThis changes is permanent."
                + "\nDo you really want to delete this?", "Delete Book Information", JOptionPane.YES_NO_OPTION);

        if (choice == JOptionPane.YES_OPTION) {
            Book searchedBook = null;

            // Search for the user in the list
            if (!bookID.isEmpty()) {
                // Search by user ID
                for (Book book : bookList) {
                    if (book.getBookID() == Integer.parseInt(bookID)) {
                        searchedBook = book;
                        break;
                    }
                }
            }

            // If the user is found, proceed with deletion
            if (searchedBook != null) {
                try {
                    // Delete from the database
                    Database_Connectivity.deleteRecordBook(searchedBook.getBookID());

                    // Delete from the ArrayList
                    bookList.remove(searchedBook);

                    // Update the table model
                    model.setRowCount(0); // Clear the table
                    for (Book book : bookList) {
                        String type;

                        if (book.getCategory().equalsIgnoreCase("Fiction")) {
                            Fiction_Book fbook = (Fiction_Book) book;
                            type = fbook.getGenre();
                        } else {
                            Non_Fiction_Book nfbook = (Non_Fiction_Book) book;
                            type = nfbook.getSubject();

                        }

                        model.addRow(new Object[]{
                            book.getBookID(),
                            book.getTitle(),
                            book.getAuthor(),
                            book.getPublisher(),
                            book.getCategory(),
                            type});
                    }

                    // Show success message
                    JOptionPane.showMessageDialog(null, "User deleted successfully!");

                    // Clear all fields
                    clearField();

                } catch (SQLException e) {
                    // Handle database errors
                    JOptionPane.showMessageDialog(null, "Error deleting user from the database: " + e.getMessage());
                }
            } else {
                // If the user is not found, show an error message
                JOptionPane.showMessageDialog(null, "User not found!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Deletion is cancelled. No item is deleted.");
            return;
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void sortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortBtnActionPerformed
        // TODO add your handling code here:
        Comparator<Book> comp = null;
        String attribute = JOptionPane.showInputDialog(null, "Which attributes do you want to sort based on?"
                + "\nPlease type only one of this (id/ title/ author/ publisher/ category/ type)");

        switch (attribute) {
            case "id":
                comp = (b1, b2) -> b1.getBookID() - b2.getBookID();
                break;
            case "title":
                comp = (b1, b2) -> b1.getTitle().compareToIgnoreCase(b2.getTitle());
                break;
            case "author":
                comp = (b1, b2) -> b1.getAuthor().compareToIgnoreCase(b2.getAuthor());
                break;
            case "publisher":
                comp = (b1, b2) -> b1.getPublisher().compareToIgnoreCase(b2.getPublisher());
                break;
            case "category":
                comp = (b1, b2) -> b1.getCategory().compareToIgnoreCase(b2.getCategory());
                break;
            case "type":
                comp = (b1, b2) -> {
                    // 4 types:
                    // fiction, fiction, nonfiction, nonfiction
                    // fiction, nonfiction, nonfiction fiction
                    
                    // For Fiction books, compare based on genres
                    if (b1.getCategory().equalsIgnoreCase("Fiction") && b2.getCategory().equalsIgnoreCase("Fiction")) {
                        Fiction_Book fb1 = (Fiction_Book) b1;
                        Fiction_Book fb2 = (Fiction_Book) b2;
                        return fb1.getGenre().compareToIgnoreCase(fb2.getGenre());
                        
                    } // For Non-fiction books, compare subjects
                    else if (b1.getCategory().equalsIgnoreCase("Non-fiction") && b2.getCategory().equalsIgnoreCase("Non-fiction")) {
                        Non_Fiction_Book nfb1 = (Non_Fiction_Book) b1;
                        Non_Fiction_Book nfb2 = (Non_Fiction_Book) b2;
                        return nfb1.getSubject().compareToIgnoreCase(nfb2.getSubject());
                        
                    } // If one is Fiction and the other is Non-fiction, sort Fiction first
                    else if (b1.getCategory().equalsIgnoreCase("Fiction")) {
                        return -1; // Fiction comes before Non-fiction
                    } else {
                        return 1; // Non-fiction comes after Fiction
                    }
                };
                break;
            default:
                JOptionPane.showMessageDialog(null, "Invalid attribute. Sorting is cancelled.");
                return;
        }

        bookList.sort(comp);

        model.setRowCount(0);
        for (Book sortedBook : bookList) {
            if (sortedBook instanceof Fiction_Book && sortedBook.getCategory().equalsIgnoreCase("Fiction")) {
                Fiction_Book fb = (Fiction_Book) sortedBook;
                model.addRow(new Object[]{sortedBook.getBookID(), sortedBook.getTitle(), sortedBook.getAuthor(), sortedBook.getPublisher(), sortedBook.getCategory(), fb.getGenre()});

            } else if (sortedBook instanceof Non_Fiction_Book && sortedBook.getCategory().equalsIgnoreCase("Non_fiction")) {
                Non_Fiction_Book nfb = (Non_Fiction_Book) sortedBook;
                model.addRow(new Object[]{sortedBook.getBookID(), sortedBook.getTitle(), sortedBook.getAuthor(), sortedBook.getPublisher(), sortedBook.getCategory(), nfb.getSubject()});

            }
        }
        JOptionPane.showMessageDialog(null, "Sort successfully. Sorted based on " + attribute.toUpperCase());
    }//GEN-LAST:event_sortBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Book_Record_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Book_Record_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Book_Record_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Book_Record_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Book_Record_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField authorTF;
    private javax.swing.JTextField bookidTF;
    private javax.swing.JComboBox<String> categoryCB;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton displayAllBtn;
    private javax.swing.JLabel genreLabel;
    private javax.swing.JTextField genreTF;
    private javax.swing.JButton insertBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField publisherTF;
    private javax.swing.JButton resetBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton sortBtn;
    private javax.swing.JTable table;
    private javax.swing.JTextField titleTF;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
